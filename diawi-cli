#!/usr/bin/env python
#

import argparse
import json
import os
import random
import string
import urllib
import urllib2
import sys

handler=urllib2.HTTPHandler(debuglevel=1)
opener = urllib2.build_opener(handler)
urllib2.install_opener(opener)

#urllib2.install_opener(
#    urllib2.build_opener(
#        urllib2.ProxyHandler({'https': '127.0.0.1:8888'})
#    )
#)
import httplib
from httplib import HTTPConnection, HTTPS_PORT
import ssl
import socket

def is_supported_version():
    try:
        ssl.PROTOCOL_TLSv1_2
    except AttributeError:
        return False
    else:
        return True

class HTTPSConnection(HTTPConnection):
    "This class allows communication via SSL."
    default_port = HTTPS_PORT

    def __init__(self, host, port=None, key_file=None, cert_file=None,
            strict=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
            source_address=None, context=None):
        HTTPConnection.__init__(self, host, port, strict, timeout,
                source_address)
        self.key_file = key_file
        self.cert_file = cert_file

    def connect(self):
        "Connect to a host on a given (SSL) port."
        sock = socket.create_connection((self.host, self.port),
                self.timeout, self.source_address)
        if self._tunnel_host:
            self.sock = sock
            self._tunnel()
        # this is the only line we modified from the httplib.py file
        # we added the ssl_version variable
        # NOTE: as of 01/25/2016 (maybe sooner) Diawi.com requires TLS 1.2
        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_TLSv1_2)

#now we override the one in httplib
httplib.HTTPSConnection = HTTPSConnection
# ssl_version corrections are done

# from http://stackoverflow.com/questions/68477/send-file-using-post-from-a-python-script
class EnhancedFile(file):
    def __init__(self, *args, **keyws):
        file.__init__(self, *args, **keyws)

    def __len__(self):
        return int(os.fstat(self.fileno())[6])

def do_request(request):
    return urllib2.urlopen(request)
#    try:
#         return urllib2.urlopen(request)
#    except urllib2.URLError, e:
#         print e.reason
#         print e.read()

def response_to_json(response):
    responseStr = ""
    for line in response:
        responseStr += line

    return json.loads(responseStr)

if not is_supported_version():
    print "ERROR: This script requires a Python interpreter with TLS v1.2 support, which was added in Python 2.7.9.  Please \
upgrade your Python interpreter, or recompile with TLS v1.2 support.  Note that version of Python shipped with Mac OS \
X El Capitan is nominally 2.7.10, but is missing TLS v1.2 support.  Exiting."
    exit(1)

parser = argparse.ArgumentParser()
parser.add_argument("filename",   help="The .ipa file to deploy.")
parser.add_argument("-c", "--comment",  help="Comment to display to the installer")
parser.add_argument("-e", "--email",    help="Email to receive the deployed app link")
parser.add_argument("-p", "--password", help="Password for the deployed app")
parser.add_argument("-n", "--notif",    help="Notify when user installs application", action="store_true")
parser.add_argument("-u", "--udid",     help="Allow testers to find by UDID on Daiwi", action="store_true")
parser.add_argument("-w", "--wall",     help="List icon on Diawi 'Wall of Apps'", action="store_true")
args = parser.parse_args()


# from http://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python
namelen = 29
tmpName = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(namelen))

tmpFileName = "%s.ipa" % tmpName
print "Uploading %s as %s..." % (args.filename, tmpFileName)

with EnhancedFile(args.filename) as theFile:
    response = do_request(urllib2.Request("https://www.diawi.com/upload.php?name=%s" % tmpFileName,
                                          theFile, 
                                          {'Content-Type': 'application/octet-stream',
                                           'Content-Length': len(theFile)}))

    resj = response_to_json(response)
    if 'error' in resj:
        print "Error uploading file: %s" % resj['error']
        exit(1)

print "Deploying uploaded file"
_, bareName = os.path.split(args.filename)
deployData = { 'uploader_0_tmpname' : tmpFileName,
               'uploader_0_name'    : bareName,
               'uploader_0_status'  : 'done',
               'uploader_count'     : '1',
               'password'           : args.password if args.password else '',
               'comment'            : args.comment if args.comment else '',
               'email'              : args.email if args.email else '',
               'notifs'             : 'on' if args.notif else 'off',
               'udid'               : 'on' if args.udid else 'off',
               'wall'               : 'on' if args.wall else 'off'
             }

encoded = urllib.urlencode(deployData)
print "Request sent to Diawi: %s" % encoded
response = do_request(urllib2.Request("https://www.diawi.com/result.php", encoded))

resj = response_to_json(response)

if resj['status'] == 'ok':
    print "Your app is deployed.  Use this link to install: %s" % resj['url']
else:
    print "Error deploying your app. %s" % resj

